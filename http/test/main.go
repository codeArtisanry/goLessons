package main
import (    "fmt"    
	"log"
	    "net/http")
var html_header = `<!DOCTYPE html><html>    <head>        <meta http-equiv="content-type" content="text/html; charset=utf-8" />        <title>Multipart Test</title>    </head>    <body><form enctype="multipart/form-data" action="/" method="post">    <input type="checkbox" name="dbnames" value="中文字符测试表单提交" > 中文字符测试表单提交    <input type="checkbox" name="dbnames" value="中文字符测试表单提交" checked> 中文字符测试表单提交    <input type="checkbox" name="dbnames" value="中文字符测试表单提交" checked> 中文字符测试表单提交    <input type="checkbox" name="dbnames" value="中文字符测试表单提交" checked> 中文字符测试表单提交    <input type="checkbox" name="dbnames" value="中文字符测试表单提交" checked> 中文字符测试表单提交    <input type="checkbox" name="dbnames" value="中文字符测试表单提交" checked> 中文字符测试表单提交    <input type="checkbox" name="dbnames" value="中文字符测试表单提交" checked> 中文字符测试表单提交    <input type="checkbox" name="dbnames" value="中文字符测试表单提交" checked> 中文字符测试表单提交    <input type="checkbox" name="dbnames" value="中文字符测试表单提交" checked> 中文字符测试表单提交    <input type="checkbox" name="dbnames" value="中文字符测试表单提交" checked> 中文字符测试表单提交    <input type="checkbox" name="dbnames" value="中文字符测试表单提交" checked> 中文字符测试表单提交    <input type="checkbox" name="dbnames" value="中文字符测试表单提交" checked> 中文字符测试表单提交    <input type="checkbox" name="dbnames" value="中文字符测试表单提交" checked> 中文字符测试表单提交    <input type="checkbox" name="dbnames" value="中文字符测试表单提交" checked> 中文字符测试表单提交    <input type="checkbox" name="dbnames" value="中文字符测试表单提交" checked> 中文字符测试表单提交    <input type="checkbox" name="dbnames" value="中文字符测试表单提交" checked> 中文字符测试表单提交    <input type="file" name="file" >    <input type="submit" /></form></body></html>`
func main() {    http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
        // w.Header().Set("Content-Type", "text/html; charset=utf-8")        // w.WriteHeader(200)        // io.WriteString(w, header+html_backup+html)        w.Write([]byte(html_header))        if http.MethodPost == r.Method {            // 1. 文件            f, _, err := r.FormFile("file")            if err != nil {                fmt.Println(err)                return            }            defer f.Close()            // 2. 获取文本            // contents := r.Form["content"]            content := r.FormValue("content")            fmt.Println(content)
            var dbs []string            // 3. get checkbox dbnames            dbs = r.Form["dbnames"]            fmt.Println(dbs)        }    })    fmt.Println("sever on port :12345")
	err := http.ListenAndServe(":12345", nil)
		if err != nil {        log.Fatal("ListenAndServe: ", err)  
		  }
	}