// Code generated by go-bindata.
// sources:
// asset/20180803_all_inner.sql
// DO NOT EDIT!

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _asset20180803_all_innerSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\x78\xda\xb1\xe0\xe5\xcc\x25\x4f\xd7\x2d\x7c\x39\xa3\xf5\xc9\xae\x5d\x4f\x76\xec\x7a\xbe\x72\xd7\xf3\x59\x2d\x10\x91\x97\x33\xe6\x3f\xed\x98\xce\xcb\x95\x92\x9a\x93\x5a\x92\xaa\xe0\x16\xe4\xef\xab\x50\x9e\x5f\x94\x1d\x5f\x94\x5a\x96\x99\x5a\x1e\x5f\x58\x9a\x5a\x9a\xaa\x50\x9e\x91\x5a\x94\xaa\x90\x58\x9a\x92\x59\x12\x5f\x5a\x9c\x5a\x14\x9f\x99\x62\x6b\x60\xcd\xcb\xc5\xcb\xa5\xab\xab\xf0\xa2\x7d\xd5\xd3\xae\x15\x10\xe3\xcc\x9f\xcd\xe9\x78\xb2\xb3\xfb\x69\x67\xef\xf3\x59\x2d\xcf\xa6\x2f\x7d\xba\x7f\x3a\x2f\x97\xa7\x5f\xb0\x6b\x50\x88\x82\xa7\x5f\x88\x3f\xb2\xd9\x1a\x28\xe6\xe9\xe4\xe4\xa7\xc7\xa7\x24\x96\xa4\xea\x80\x95\x80\x78\x99\x29\x3a\xf9\x45\xe9\x89\x79\x20\x46\x4a\x6a\x41\x62\x51\x09\x88\x05\x53\x5f\x9c\x9c\x5f\x94\xaa\x93\x9c\x9f\x9b\x9b\x9a\x57\xa2\xc9\xcb\xa5\xa0\x10\xec\xea\xe3\xea\x1c\xa2\x40\x99\xb1\x06\x3a\xea\xea\x0a\x20\xd3\xf0\x06\x45\x7a\x6e\x49\x7c\x72\x51\x6a\x62\x49\xaa\x9d\xad\xba\x91\x81\xa1\x85\xae\x81\xb9\xae\x81\xa1\xba\x42\x62\x5e\x8a\x02\xcc\x4a\x1b\x64\x19\x58\x68\x41\xa2\x03\x11\x4e\x4f\x76\x74\xbd\x9c\xbb\xe8\xe9\xf6\x4d\xcf\x77\xf7\x3f\x5d\xd2\xf2\x7c\x42\x1b\x3c\xe4\x14\x14\x88\x8b\x17\x32\x1c\x03\x08\x00\x00\xff\xff\xad\xaf\xcb\x25\x18\x02\x00\x00")

func asset20180803_all_innerSqlBytes() ([]byte, error) {
	return bindataRead(
		_asset20180803_all_innerSql,
		"asset/20180803_all_inner.sql",
	)
}

func asset20180803_all_innerSql() (*asset, error) {
	bytes, err := asset20180803_all_innerSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "asset/20180803_all_inner.sql", size: 536, mode: os.FileMode(436), modTime: time.Unix(1533540297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"asset/20180803_all_inner.sql": asset20180803_all_innerSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"asset": &bintree{nil, map[string]*bintree{
		"20180803_all_inner.sql": &bintree{asset20180803_all_innerSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

